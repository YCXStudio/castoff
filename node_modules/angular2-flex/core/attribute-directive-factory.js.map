{"version":3,"sources":["core/attribute-directive-factory.ts"],"names":[],"mappings":"OAAO,EACL,QAAQ,EACR,UAAU,EAEV,SAAS,EAEV,MAAM,eAAe;AAYtB;IAAA;IA+DA,CAAC;IA9DQ,qDAAiB,GAAxB,UAAyB,IAAY,EAAE,IAAY,EAAE,QAAmB;QACtE,IAAI,QAAQ,GAAG,IAAI,GAAM,IAAI,SAAI,IAAM,GAAG,IAAI,CAAC;QAE/C,MAAM,CAAC,SAAS,CAAC;YACf,QAAQ,EAAE,MAAI,QAAQ,MAAG;YACzB,MAAM,EAAE,CAAC,sBAAmB,QAAQ,CAAE,CAAC;SACxC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEM,2DAAuB,GAA9B,UAA+B,SAAiB,EAAE,QAAmB;QAEnE,MAAM,CAAC;YACL,WAAW,EAAE,CAAC,QAAQ,EAAE,UAAU;gBAChC,UAAU,QAAkB,EAAE,OAAmB;oBAC/C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC;oBAErC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;oBAC1B,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;gBAC3B,CAAC,CAAC;YAEJ,QAAQ;gBACN,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;oBACzB,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBACnE,CAAC;YACH,CAAC;YAED,WAAW,YAAC,OAAyB;gBACnC,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,YAAY,KAAK,OAAO,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;oBACjF,MAAM,CAAC;gBACT,CAAC;gBAED,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;gBACnE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;oBAC5C,IAAI,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;oBAErE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;oBACrD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;gBACnD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;gBACnD,CAAC;YACH,CAAC;YAED,KAAK,EAAE,QAAQ,IAAI,cAAc,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YAE7C,QAAQ,YAAC,SAAiB;gBACxB,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;YAC/D,CAAC;YAED,WAAW,YAAC,SAAiB;gBAC3B,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;YAChE,CAAC;YAED,cAAc,YAAC,KAAa;gBAC1B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACX,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACvB,CAAC;gBAED,MAAM,CAAI,IAAI,CAAC,QAAQ,SAAI,KAAO,CAAC;YACrC,CAAC;SACF,CAAC;IACJ,CAAC;IACH,gCAAC;AAAD,CA/DA,AA+DC,IAAA","file":"core/attribute-directive-factory.js","sourcesContent":["import {\n  Renderer,\n  ElementRef,\n  ClassDefinition,\n  Directive,\n  Type\n} from '@angular/core';\n\ninterface AttributeChanges {\n  attributeValue: ValueChange;\n}\n\ninterface ValueChange {\n  currentValue: string;\n  previousValue: string;\n  isFirstChange(): boolean;\n}\n\nexport class AttributeDirectiveFactory {\n  public generateDirective(name: string, size: string, getValue?: Function): Type<any> {\n    let fullName = size ? `${name}-${size}` : name;\n\n    return Directive({\n      selector: `[${fullName}]`,\n      inputs: [`attributeValue: ${fullName}`]\n    }).Class(this.generateClassDefinition(fullName, getValue));\n  }\n\n  public generateClassDefinition(attribute: string, getValue?: Function): ClassDefinition {\n\n    return {\n      constructor: [Renderer, ElementRef,\n        function (renderer: Renderer, element: ElementRef) {\n          this.renderer = renderer;\n          this.element = element.nativeElement;\n\n          this.selector = attribute;\n          this.attributeValue = '';\n        }],\n\n      ngOnInit() {\n        if (!this.attributeValue) {\n          this.renderer.setElementClass(this.element, this.selector, true);\n        }\n      },\n\n      ngOnChanges(changes: AttributeChanges) {\n        if (changes.attributeValue.currentValue === changes.attributeValue.previousValue) {\n          return;\n        }\n\n        let currentValue = this.value(changes.attributeValue.currentValue);\n        if (!changes.attributeValue.isFirstChange()) {\n          let previousValue = this.value(changes.attributeValue.previousValue);\n\n          this.removeClass(this.normalizeClass(previousValue));\n          this.addClass(this.normalizeClass(currentValue));\n        } else {\n          this.addClass(this.normalizeClass(currentValue));\n        }\n      },\n\n      value: getValue || function () { return ''; },\n\n      addClass(className: string) {\n        this.renderer.setElementClass(this.element, className, true);\n      },\n\n      removeClass(className: string) {\n        this.renderer.setElementClass(this.element, className, false);\n      },\n\n      normalizeClass(value: string) {\n        if (!value) {\n          return this.selector;\n        }\n\n        return `${this.selector}-${value}`;\n      }\n    };\n  }\n}\n"],"sourceRoot":"/source/"}