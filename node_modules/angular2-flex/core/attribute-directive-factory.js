import { Renderer, ElementRef, Directive } from '@angular/core';
export var AttributeDirectiveFactory = (function () {
    function AttributeDirectiveFactory() {
    }
    AttributeDirectiveFactory.prototype.generateDirective = function (name, size, getValue) {
        var fullName = size ? name + "-" + size : name;
        return Directive({
            selector: "[" + fullName + "]",
            inputs: [("attributeValue: " + fullName)]
        }).Class(this.generateClassDefinition(fullName, getValue));
    };
    AttributeDirectiveFactory.prototype.generateClassDefinition = function (attribute, getValue) {
        return {
            constructor: [Renderer, ElementRef,
                function (renderer, element) {
                    this.renderer = renderer;
                    this.element = element.nativeElement;
                    this.selector = attribute;
                    this.attributeValue = '';
                }],
            ngOnInit: function () {
                if (!this.attributeValue) {
                    this.renderer.setElementClass(this.element, this.selector, true);
                }
            },
            ngOnChanges: function (changes) {
                if (changes.attributeValue.currentValue === changes.attributeValue.previousValue) {
                    return;
                }
                var currentValue = this.value(changes.attributeValue.currentValue);
                if (!changes.attributeValue.isFirstChange()) {
                    var previousValue = this.value(changes.attributeValue.previousValue);
                    this.removeClass(this.normalizeClass(previousValue));
                    this.addClass(this.normalizeClass(currentValue));
                }
                else {
                    this.addClass(this.normalizeClass(currentValue));
                }
            },
            value: getValue || function () { return ''; },
            addClass: function (className) {
                this.renderer.setElementClass(this.element, className, true);
            },
            removeClass: function (className) {
                this.renderer.setElementClass(this.element, className, false);
            },
            normalizeClass: function (value) {
                if (!value) {
                    return this.selector;
                }
                return this.selector + "-" + value;
            }
        };
    };
    return AttributeDirectiveFactory;
}());

//# sourceMappingURL=attribute-directive-factory.js.map
