(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
    (factory((global.angular2flex = global.angular2flex || {}),global.ng.core));
}(this, (function (exports,_angular_core) { 'use strict';

var LayoutUtility = (function () {
    function LayoutUtility() {
    }
    LayoutUtility.findIn = function (item, list, replaceWith) {
        item = replaceWith && item ? item.replace(WHITESPACE, replaceWith) : item;
        var found = false;
        if (item) {
            list.forEach(function (it) {
                it = replaceWith ? it.replace(WHITESPACE, replaceWith) : it;
                found = found || (it === item);
            });
        }
        return found;
    };
    return LayoutUtility;
}());

var BREAKPOINTS = [
    '',
    'xs',
    'gt-xs',
    'sm',
    'gt-sm',
    'md',
    'gt-md',
    'lg',
    'gt-lg',
    'xl',
    'print'
];
var SUFFIXES = /(-gt)?-(sm|md|lg|print)/g;

var AttributeDirectiveFactory = (function () {
    function AttributeDirectiveFactory() {
    }
    AttributeDirectiveFactory.prototype.generateDirective = function (name, size, getValue) {
        var fullName = size ? name + "-" + size : name;
        return _angular_core.Directive({
            selector: "[" + fullName + "]",
            inputs: [("attributeValue: " + fullName)]
        }).Class(this.generateClassDefinition(fullName, getValue));
    };
    AttributeDirectiveFactory.prototype.generateClassDefinition = function (attribute, getValue) {
        return {
            constructor: [_angular_core.Renderer, _angular_core.ElementRef,
                function (renderer, element) {
                    this.renderer = renderer;
                    this.element = element.nativeElement;
                    this.selector = attribute;
                    this.attributeValue = '';
                }],
            ngOnInit: function () {
                if (!this.attributeValue) {
                    this.renderer.setElementClass(this.element, this.selector, true);
                }
            },
            ngOnChanges: function (changes) {
                if (changes.attributeValue.currentValue === changes.attributeValue.previousValue) {
                    return;
                }
                var currentValue = this.value(changes.attributeValue.currentValue);
                if (!changes.attributeValue.isFirstChange()) {
                    var previousValue = this.value(changes.attributeValue.previousValue);
                    this.removeClass(this.normalizeClass(previousValue));
                    this.addClass(this.normalizeClass(currentValue));
                }
                else {
                    this.addClass(this.normalizeClass(currentValue));
                }
            },
            value: getValue || function () { return ''; },
            addClass: function (className) {
                this.renderer.setElementClass(this.element, className, true);
            },
            removeClass: function (className) {
                this.renderer.setElementClass(this.element, className, false);
            },
            normalizeClass: function (value) {
                if (!value) {
                    return this.selector;
                }
                return this.selector + "-" + value;
            }
        };
    };
    return AttributeDirectiveFactory;
}());

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var WHITESPACE = /\s+/g;
var LayoutCoreModule = (function () {
    function LayoutCoreModule() {
    }
    LayoutCoreModule.forRoot = function () {
        return {
            ngModule: LayoutCoreModule,
            providers: [],
        };
    };
    LayoutCoreModule = __decorate([
        _angular_core.NgModule({
            imports: [],
            exports: [],
        }), 
        __metadata('design:paramtypes', [])
    ], LayoutCoreModule);
    return LayoutCoreModule;
}());

var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var LAYOUT_OPTIONS = [
    'row',
    'column'
];
function getValue(value) {
    var attributeValue = value;
    if (!LayoutUtility.findIn(value, LAYOUT_OPTIONS)) {
        attributeValue = LAYOUT_OPTIONS[0];
    }
    return attributeValue;
}
var directives = [];
var generator = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "layout-" + breakPoint : 'layout';
    directives.push(generator.generateDirective(name, breakPoint, getValue));
});
var LayoutModule = (function () {
    function LayoutModule() {
    }
    LayoutModule.forRoot = function () {
        return {
            ngModule: LayoutModule,
            providers: []
        };
    };
    LayoutModule = __decorate$2([
        _angular_core.NgModule({
            declarations: directives.slice(),
            imports: [],
            exports: directives.slice(),
        }), 
        __metadata$2('design:paramtypes', [])
    ], LayoutModule);
    return LayoutModule;
}());

var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var directives$1 = [];
var generator$1 = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "layout-padding-" + breakPoint : 'layout-padding';
    directives$1.push(generator$1.generateDirective(name, breakPoint));
});
var LayoutPaddingModule = (function () {
    function LayoutPaddingModule() {
    }
    LayoutPaddingModule.forRoot = function () {
        return {
            ngModule: LayoutPaddingModule,
            providers: []
        };
    };
    LayoutPaddingModule = __decorate$3([
        _angular_core.NgModule({
            declarations: directives$1.slice(),
            imports: [],
            exports: directives$1.slice(),
        }), 
        __metadata$3('design:paramtypes', [])
    ], LayoutPaddingModule);
    return LayoutPaddingModule;
}());

var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var directives$2 = [];
var generator$2 = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "layout-margin-" + breakPoint : 'layout-margin';
    directives$2.push(generator$2.generateDirective(name, breakPoint));
});
var LayoutMarginModule = (function () {
    function LayoutMarginModule() {
    }
    LayoutMarginModule.forRoot = function () {
        return {
            ngModule: LayoutMarginModule,
            providers: []
        };
    };
    LayoutMarginModule = __decorate$4([
        _angular_core.NgModule({
            declarations: directives$2.slice(),
            imports: [],
            exports: directives$2.slice(),
        }), 
        __metadata$4('design:paramtypes', [])
    ], LayoutMarginModule);
    return LayoutMarginModule;
}());

var __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var directives$3 = [];
var generator$3 = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "layout-wrap-" + breakPoint : 'layout-wrap';
    directives$3.push(generator$3.generateDirective(name, breakPoint));
});
var LayoutWrapModule = (function () {
    function LayoutWrapModule() {
    }
    LayoutWrapModule.forRoot = function () {
        return {
            ngModule: LayoutWrapModule,
            providers: []
        };
    };
    LayoutWrapModule = __decorate$5([
        _angular_core.NgModule({
            declarations: directives$3.slice(),
            imports: [],
            exports: directives$3.slice(),
        }), 
        __metadata$5('design:paramtypes', [])
    ], LayoutWrapModule);
    return LayoutWrapModule;
}());

var __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$6 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var directives$4 = [];
var generator$4 = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "layout-fill-" + breakPoint : 'layout-fill';
    directives$4.push(generator$4.generateDirective(name, breakPoint));
});
var LayoutFillModule = (function () {
    function LayoutFillModule() {
    }
    LayoutFillModule.forRoot = function () {
        return {
            ngModule: LayoutFillModule,
            providers: []
        };
    };
    LayoutFillModule = __decorate$6([
        _angular_core.NgModule({
            declarations: directives$4.slice(),
            imports: [],
            exports: directives$4.slice(),
        }), 
        __metadata$6('design:paramtypes', [])
    ], LayoutFillModule);
    return LayoutFillModule;
}());

var __decorate$7 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$7 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var directives$5 = [];
var generator$5 = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "hide-" + breakPoint : 'hide';
    directives$5.push(generator$5.generateDirective(name, breakPoint));
});
var HideModule = (function () {
    function HideModule() {
    }
    HideModule.forRoot = function () {
        return {
            ngModule: HideModule,
            providers: []
        };
    };
    HideModule = __decorate$7([
        _angular_core.NgModule({
            declarations: directives$5.slice(),
            imports: [],
            exports: directives$5.slice(),
        }), 
        __metadata$7('design:paramtypes', [])
    ], HideModule);
    return HideModule;
}());

var __decorate$8 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$8 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var directives$6 = [];
var generator$6 = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "show-" + breakPoint : 'show';
    directives$6.push(generator$6.generateDirective(name, breakPoint));
});
var ShowModule = (function () {
    function ShowModule() {
    }
    ShowModule.forRoot = function () {
        return {
            ngModule: ShowModule,
            providers: []
        };
    };
    ShowModule = __decorate$8([
        _angular_core.NgModule({
            declarations: directives$6.slice(),
            imports: [],
            exports: directives$6.slice(),
        }), 
        __metadata$8('design:paramtypes', [])
    ], ShowModule);
    return ShowModule;
}());

var __decorate$9 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$9 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ALIGNMENT_MAIN_AXIS = [
    '',
    'start',
    'center',
    'end',
    'stretch',
    'space-around',
    'space-between'
];
var ALIGNMENT_CROSS_AXIS = [
    '',
    'start',
    'center',
    'end',
    'stretch'
];
function extractAlignAxis(attrValue) {
    if (attrValue === void 0) { attrValue = ''; }
    var axis = {
        main: 'start',
        cross: 'stretch'
    };
    var values;
    if (attrValue.indexOf('-') === 0 || attrValue.indexOf(' ') === 0) {
        // For missing main-axis values
        attrValue = "none" + attrValue;
    }
    values = attrValue.toLowerCase().trim().replace(WHITESPACE, '-').split('-');
    if (values.length && (values[0] === 'space')) {
        // for main-axis values of 'space-around' or 'space-between'
        values = [(values[0] + "-" + values[1]), values[2]];
    }
    if (values.length > 0) {
        axis.main = values[0] || axis.main;
    }
    if (values.length > 1) {
        axis.cross = values[1] || axis.cross;
    }
    if (ALIGNMENT_MAIN_AXIS.indexOf(axis.main) < 0) {
        axis.main = 'start';
    }
    if (ALIGNMENT_CROSS_AXIS.indexOf(axis.cross) < 0) {
        axis.cross = 'stretch';
    }
    return axis;
}
function getValue$1(value) {
    var attributeValue = value;
    var axis = extractAlignAxis(attributeValue);
    attributeValue = axis.main + "-" + axis.cross;
    return attributeValue;
}
var directives$7 = [];
var generator$7 = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "layout-align-" + breakPoint : 'layout-align';
    directives$7.push(generator$7.generateDirective(name, breakPoint, getValue$1));
});
var LayoutAlignModule = (function () {
    function LayoutAlignModule() {
    }
    LayoutAlignModule.forRoot = function () {
        return {
            ngModule: LayoutAlignModule,
            providers: []
        };
    };
    LayoutAlignModule = __decorate$9([
        _angular_core.NgModule({
            declarations: directives$7.slice(),
            imports: [],
            exports: directives$7.slice(),
        }), 
        __metadata$9('design:paramtypes', [])
    ], LayoutAlignModule);
    return LayoutAlignModule;
}());

var __decorate$10 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$10 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var FLEX_OPTIONS = [
    'grow',
    'initial',
    'auto',
    'none',
    'noshrink',
    'nogrow'
];
function getValue$2(value) {
    var attributeValue = value;
    if (!LayoutUtility.findIn(attributeValue, FLEX_OPTIONS)) {
        if (isNaN(attributeValue)) {
            attributeValue = '';
        }
    }
    return attributeValue;
}
var directives$8 = [];
var generator$8 = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "flex-" + breakPoint : 'flex';
    directives$8.push(generator$8.generateDirective(name, breakPoint, getValue$2));
});
var FlexModule = (function () {
    function FlexModule() {
    }
    FlexModule.forRoot = function () {
        return {
            ngModule: FlexModule,
            providers: []
        };
    };
    FlexModule = __decorate$10([
        _angular_core.NgModule({
            declarations: directives$8.slice(),
            imports: [],
            exports: directives$8.slice(),
        }), 
        __metadata$10('design:paramtypes', [])
    ], FlexModule);
    return FlexModule;
}());

var __decorate$11 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$11 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
function getValue$3(value) {
    var attributeValue = value;
    if (!attributeValue || isNaN(+attributeValue)) {
        attributeValue = '0';
    }
    return attributeValue;
}
var directives$9 = [];
var generator$9 = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "flex-order-" + breakPoint : 'flex-order';
    directives$9.push(generator$9.generateDirective(name, breakPoint, getValue$3));
});
var FlexOrderModule = (function () {
    function FlexOrderModule() {
    }
    FlexOrderModule.forRoot = function () {
        return {
            ngModule: FlexOrderModule,
            providers: []
        };
    };
    FlexOrderModule = __decorate$11([
        _angular_core.NgModule({
            declarations: directives$9.slice(),
            imports: [],
            exports: directives$9.slice(),
        }), 
        __metadata$11('design:paramtypes', [])
    ], FlexOrderModule);
    return FlexOrderModule;
}());

var __decorate$12 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$12 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
function getValue$4(value) {
    var attributeValue = value;
    if (!attributeValue || isNaN(+attributeValue)) {
        attributeValue = '0';
    }
    return attributeValue;
}
var directives$10 = [];
var generator$10 = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "flex-offset-" + breakPoint : 'flex-offset';
    directives$10.push(generator$10.generateDirective(name, breakPoint, getValue$4));
});
var FlexOffsetModule = (function () {
    function FlexOffsetModule() {
    }
    FlexOffsetModule.forRoot = function () {
        return {
            ngModule: FlexOffsetModule,
            providers: []
        };
    };
    FlexOffsetModule = __decorate$12([
        _angular_core.NgModule({
            declarations: directives$10.slice(),
            imports: [],
            exports: directives$10.slice(),
        }), 
        __metadata$12('design:paramtypes', [])
    ], FlexOffsetModule);
    return FlexOffsetModule;
}());

var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var FLEX_ANGULAR_MODULES = [
    LayoutModule,
    LayoutMarginModule,
    LayoutPaddingModule,
    LayoutWrapModule,
    LayoutFillModule,
    HideModule,
    ShowModule,
    LayoutAlignModule,
    FlexModule,
    FlexOrderModule,
    FlexOffsetModule
];
var Angular2FlexRootModule = (function () {
    function Angular2FlexRootModule() {
    }
    Angular2FlexRootModule = __decorate$1([
        _angular_core.NgModule({
            imports: [
                LayoutModule.forRoot(),
                LayoutMarginModule.forRoot(),
                LayoutPaddingModule.forRoot(),
                LayoutWrapModule.forRoot(),
                LayoutFillModule.forRoot(),
                HideModule.forRoot(),
                ShowModule.forRoot(),
                LayoutAlignModule.forRoot(),
                FlexModule.forRoot(),
                FlexOrderModule.forRoot(),
                FlexOffsetModule.forRoot()
            ],
            exports: FLEX_ANGULAR_MODULES,
        }), 
        __metadata$1('design:paramtypes', [])
    ], Angular2FlexRootModule);
    return Angular2FlexRootModule;
}());
var Angular2FlexModule = (function () {
    function Angular2FlexModule() {
    }
    Angular2FlexModule.forRoot = function () {
        return { ngModule: Angular2FlexRootModule };
    };
    Angular2FlexModule = __decorate$1([
        _angular_core.NgModule({
            imports: FLEX_ANGULAR_MODULES,
            exports: FLEX_ANGULAR_MODULES,
        }), 
        __metadata$1('design:paramtypes', [])
    ], Angular2FlexModule);
    return Angular2FlexModule;
}());

var __decorate$13 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$13 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var directives$11 = [];
var generator$11 = new AttributeDirectiveFactory();
BREAKPOINTS.forEach(function (breakPoint) {
    var name = breakPoint ? "layout-nowrap-" + breakPoint : 'layout-nowrap';
    directives$11.push(generator$11.generateDirective(name, breakPoint));
});
var LayoutNowrapModule = (function () {
    function LayoutNowrapModule() {
    }
    LayoutNowrapModule.forRoot = function () {
        return {
            ngModule: LayoutNowrapModule,
            providers: []
        };
    };
    LayoutNowrapModule = __decorate$13([
        _angular_core.NgModule({
            declarations: directives$11.slice(),
            imports: [],
            exports: directives$11.slice(),
        }), 
        __metadata$13('design:paramtypes', [])
    ], LayoutNowrapModule);
    return LayoutNowrapModule;
}());

exports.WHITESPACE = WHITESPACE;
exports.LayoutCoreModule = LayoutCoreModule;
exports.LayoutUtility = LayoutUtility;
exports.BREAKPOINTS = BREAKPOINTS;
exports.SUFFIXES = SUFFIXES;
exports.AttributeDirectiveFactory = AttributeDirectiveFactory;
exports.Angular2FlexRootModule = Angular2FlexRootModule;
exports.Angular2FlexModule = Angular2FlexModule;
exports.FLEX_OPTIONS = FLEX_OPTIONS;
exports.FlexModule = FlexModule;
exports.FlexOffsetModule = FlexOffsetModule;
exports.FlexOrderModule = FlexOrderModule;
exports.LayoutWrapModule = LayoutWrapModule;
exports.LayoutNowrapModule = LayoutNowrapModule;
exports.LAYOUT_OPTIONS = LAYOUT_OPTIONS;
exports.LayoutModule = LayoutModule;
exports.LayoutAlignModule = LayoutAlignModule;
exports.LayoutFillModule = LayoutFillModule;
exports.HideModule = HideModule;
exports.LayoutMarginModule = LayoutMarginModule;
exports.LayoutPaddingModule = LayoutPaddingModule;
exports.ShowModule = ShowModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=./angular2-flex.umd.js.map
